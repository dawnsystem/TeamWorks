// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  nombre    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects      Project[]
  labels        Label[]
  comments      Comment[]
  templates     TaskTemplate[]
  notifications Notification[]

  @@map("users")
}

model Project {
  id        String   @id @default(uuid())
  nombre    String
  color     String   @default("#808080")
  orden     Int      @default(0)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  sections      Section[]
  tasks         Task[]
  notifications Notification[]

  @@map("projects")
}

model Section {
  id        String   @id @default(uuid())
  nombre    String
  orden     Int      @default(0)
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   Task[]

  @@map("sections")
}

model Task {
  id              String    @id @default(uuid())
  titulo          String
  descripcion     String?
  prioridad       Int       @default(4) // 1: alta, 2: media, 3: baja, 4: ninguna
  fechaVencimiento DateTime?
  completada      Boolean   @default(false)
  orden           Int       @default(0)
  projectId       String
  sectionId       String?
  parentTaskId    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  section       Section?       @relation(fields: [sectionId], references: [id], onDelete: SetNull)
  parentTask    Task?          @relation("SubTasks", fields: [parentTaskId], references: [id], onDelete: Cascade)
  subTasks      Task[]         @relation("SubTasks")
  labels        TaskLabel[]
  comments      Comment[]
  reminders     Reminder[]
  notifications Notification[]

  @@map("tasks")
}

model Label {
  id        String   @id @default(uuid())
  nombre    String
  color     String   @default("#808080")
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks TaskLabel[]

  @@map("labels")
}

model TaskLabel {
  taskId  String
  labelId String

  task  Task  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  label Label @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@id([taskId, labelId])
  @@map("task_labels")
}

model Comment {
  id        String   @id @default(uuid())
  contenido String
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task          Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@map("comments")
}

model Reminder {
  id        String   @id @default(uuid())
  fechaHora DateTime
  taskId    String
  enviado   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("reminders")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String   // 'reminder', 'comment', 'task_completed', 'due_date', 'mention', 'ai_action'
  title     String
  message   String
  read      Boolean  @default(false)
  
  // Referencias opcionales seg√∫n tipo
  taskId    String?
  commentId String?
  projectId String?
  sectionId String?
  labelId   String?
  
  // Metadatos
  metadata  Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  task    Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
  @@index([userId, read])
  @@index([userId, createdAt])
}

model TaskTemplate {
  id          String   @id @default(uuid())
  titulo      String
  descripcion String?
  prioridad   Int      @default(4)
  userId      String
  labelIds    String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("task_templates")
}

